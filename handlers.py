import os
import gspread
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import F, Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards import kb_tran
from states import Form
from core import create_new_sheet, get_managers_from_sheet, is_user_registered, setup_google_sheets, update_conversion_sheet, find_company_sheet_by_tgid

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()




def get_next_id(sheet):
    try:
        ids = sheet.col_values(1)
        if len(ids) > 1:
            last_id = int(ids[-1])
            return last_id + 1
        else:
            return 1
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID: {e}")
        return 1



async def cmd_start(message: types.Message, command: Command, state: FSMContext):
    args = command.args
    tgid = message.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    sheet = setup_google_sheets()
    if is_user_registered(sheet, tgid):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üòä", parse_mode="HTML", reply_markup=kb_tran)
        return

    if args:
        try:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ LITE –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ü•≥\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–æ–º –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏!", 
                parse_mode="HTML", 
                reply_markup=kb_tran
            )

            next_id = get_next_id(sheet)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
            new_sheet_url = create_new_sheet(args)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
            sheet.append_row([next_id, tgid, args, new_sheet_url])

            conversion_sheet = setup_google_sheets(1)
            update_conversion_sheet(conversion_sheet, args, "start_clicked")

        except Exception as e:
            print(e)
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É", parse_mode="HTML")
    else:
        await message.answer("–¢—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç.", parse_mode="HTML")

async def cmd_info(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info.
    –ò—â–µ—Ç URL —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
    """
    tgid = message.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID
    company_sheet_url = find_company_sheet_by_tgid(tgid)
    
    if company_sheet_url:
        await message.answer(f"URL –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏: {company_sheet_url}")
    else:
        await message.answer("–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def send_file_handler(message: types.Message, state: FSMContext):
    tgid = message.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID
    company_sheet_url = find_company_sheet_by_tgid(tgid)
    
    if company_sheet_url:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–ª–∏—Å—Ç–æ–≤) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏
        managers = get_managers_from_sheet(company_sheet_url)
        
        if managers:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=manager, callback_data=f"manager_{manager}")] for manager in managers
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=keyboard)
        else:
            await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    await state.set_state(Form.waiting_for_manager)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

async def process_manager_selection(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ callback_data
    manager_name = callback.data.replace("manager_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_manager=manager_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_name}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

async def process_audio(message: types.Message, state: FSMContext):
    if message.audio:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞!")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")

async def cmd_add_manager(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await state.set_state(Form.waiting_for_manager_name)

async def process_manager_name(message: types.Message, state: FSMContext):
    manager_name = message.text
    tgid = message.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID
    company_sheet_url = find_company_sheet_by_tgid(tgid)
    
    if company_sheet_url:
        try:
            await message.answer(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏
            scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                "/home/klim-petrov/projects/smartLITE/credentials.json", scope
            )
            client = gspread.authorize(creds)
            company_sheet = client.open_by_url(company_sheet_url)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –∏–º–µ–Ω–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            company_sheet.add_worksheet(title=f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name}", rows="100", cols="20")
            
        except Exception as e:
            print(e)
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    await state.clear()

def reg_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command(commands=['start']))
    dp.message.register(send_file_handler, F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"
    dp.message.register(process_audio, Form.waiting_for_audio)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    dp.message.register(cmd_add_manager, Command(commands=['add_manager']))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_manager
    dp.message.register(process_manager_name, Form.waiting_for_manager_name)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    dp.message.register(cmd_info, Command(commands=['info']))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    dp.callback_query.register(process_manager_selection, F.data.startswith("manager_"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞