# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import gspread

from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import F, Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards import kb_tran
from states import Form

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_telegram_id_by_company_id(sheet, company_id):
    """
    –ò—â–µ—Ç Telegram ID –ø–æ ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ Google Sheets.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        all_values = sheet.get_all_values()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID –∫–æ–º–ø–∞–Ω–∏–∏
        for row in all_values:
            if row[0] == str(company_id):  # ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
                return row[1]  # Telegram ID –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
        
        # –ï—Å–ª–∏ ID –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Telegram ID: {e}")
        return None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
def setup_google_sheets(sheet_index=0):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        "/home/klim-petrov/projects/smartLITE/credentials.json", scope
    )
    client = gspread.authorize(creds)
    sheet = client.open_by_key("1CoDQJn0T_scUV7ZsbYU8x2nZTzu_F9CBrculeQIG2KA").get_worksheet(sheet_index)
    return sheet

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ ID
def get_next_id(sheet):
    try:
        ids = sheet.col_values(1)
        if len(ids) > 1:
            last_id = int(ids[-1])
            return last_id + 1
        else:
            return 1
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID: {e}")
        return 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
def update_conversion_sheet(sheet, argument, column_name):
    try:
        all_values = sheet.get_all_values()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        for i, row in enumerate(all_values):
            if row[0] == argument:
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                column_index = all_values[0].index(column_name)
                current_value = int(row[column_index]) if row[column_index] else 0
                sheet.update_cell(i + 1, column_index + 1, current_value + 1)
                return
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        new_row = [argument] + [0] * (len(all_values[0]) - 1)
        column_index = all_values[0].index(column_name)
        new_row[column_index] = 1
        sheet.append_row(new_row)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
async def cmd_start(message: types.Message, command: Command, state: FSMContext):
    args = command.args
    
    if args:
        try:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ LITE –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ü•≥\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–æ–º –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏!", 
                parse_mode="HTML", 
                reply_markup=kb_tran
            )

            sheet = setup_google_sheets()
            next_id = get_next_id(sheet)
            sheet.append_row([next_id, message.from_user.id, args])

            conversion_sheet = setup_google_sheets(1)
            update_conversion_sheet(conversion_sheet, args, "start_clicked")

        except Exception as e:
            print(e)
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É", parse_mode="HTML")
    else:
        await message.answer("–¢—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç.", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª" (ReplyKeyboard)
async def send_file_handler(message: types.Message, state: FSMContext):
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–æ–º –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.")
    await state.set_state(Form.waiting_for_audio)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
async def process_audio(message: types.Message, state: FSMContext):
    if message.audio:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞!")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def reg_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command(commands=['start']))
    dp.message.register(send_file_handler, F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"
    dp.message.register(process_audio, Form.waiting_for_audio)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞