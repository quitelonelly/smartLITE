import os
import gspread
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import F, Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards import kb_tran
from states import Form
from core import check_and_mark_key, create_manager_sheet, create_new_sheet, get_company_id_by_tgid, get_managers_from_sheet, is_user_registered, setup_google_sheets, update_conversion_sheet, find_company_sheet_by_tgid

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def get_next_id(sheet):
    try:
        ids = sheet.col_values(1)
        if len(ids) > 1:
            last_id = int(ids[-1])
            return last_id + 1
        else:
            return 1
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID: {e}")
        return 1



async def cmd_start(message: types.Message, command: Command, state: FSMContext):
    args = command.args
    tgid = message.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    sheet = setup_google_sheets()
    if is_user_registered(sheet, tgid):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üòä", parse_mode="HTML", reply_markup=kb_tran)
        return

    if args:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –∏ –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            if not check_and_mark_key(sheet, args):
                await message.answer("–≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="HTML")
                return

            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ LITE –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ü•≥\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–æ–º –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏!", 
                parse_mode="HTML", 
                reply_markup=kb_tran
            )

            next_id = get_next_id(sheet)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
            new_sheet_url = create_new_sheet(args)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
            sheet.append_row([next_id, tgid, args, new_sheet_url])

        except Exception as e:
            print(e)
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É", parse_mode="HTML")
    else:
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.", parse_mode="HTML")

async def cmd_info(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info.
    –ò—â–µ—Ç URL —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
    """
    tgid = message.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID
    company_sheet_url = find_company_sheet_by_tgid(tgid)
    
    if company_sheet_url:
        await message.answer(f"URL –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏: {company_sheet_url}")
    else:
        await message.answer("–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

import httpx  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram.types import FSInputFile

async def send_file_handler(message: types.Message, state: FSMContext):
    tgid = message.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID
    company_sheet_url = find_company_sheet_by_tgid(tgid)
    
    if company_sheet_url:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–ª–∏—Å—Ç–æ–≤) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏
        managers = get_managers_from_sheet(company_sheet_url)
        
        if managers:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=manager, callback_data=f"manager_{manager}")] for manager in managers
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=keyboard)
        else:
            await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    await state.set_state(Form.waiting_for_manager)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot_errors.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


async def process_audio(message: types.Message, state: FSMContext):
    if message.audio:
        # –°—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑
        await message.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        manager_name = data.get("selected_manager")
        
        if not manager_name:
            await message.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return

        # –£–±–∏—Ä–∞–µ–º "–ú–µ–Ω–µ–¥–∂–µ—Ä " –∏–∑ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if manager_name.startswith("–ú–µ–Ω–µ–¥–∂–µ—Ä "):
            manager_name = manager_name.replace("–ú–µ–Ω–µ–¥–∂–µ—Ä ", "")

        # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        tgid = message.from_user.id
        sheet = setup_google_sheets()
        company_id = get_company_id_by_tgid(sheet, tgid)

        if not company_id:
            await message.answer("–û—à–∏–±–∫–∞: ID –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
        audio_path = f"temp_audio_{company_id}.mp3"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        file_id = message.audio.file_id
        file = await bot.get_file(file_id)
        await bot.download_file(file.file_path, destination=audio_path)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
            async with httpx.AsyncClient(timeout=httpx.Timeout(100.0)) as client:
                with open(audio_path, "rb") as audio_file:
                    url = f"http://185.207.0.3:5001/analyze?company_id={company_id}&manager_name={manager_name}"
                    files = {"file": (os.path.basename(audio_path), audio_file, "audio/mpeg")}
                    response = await client.post(url, files=files)

                if response.status_code == 200:
                    await message.answer("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                    logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.json()}")
                else:
                    error_message = f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} - {response.text}"
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
                    logger.error(error_message)
        except httpx.ReadTimeout:
            await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–Ω–∞–ª–∏–∑–∞")
        except Exception as e:
            await message.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(audio_path):
                os.unlink(audio_path)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        
async def process_manager_selection(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ callback_data
    manager_name = callback.data.replace("manager_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_manager=manager_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_name}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    await state.set_state(Form.waiting_for_audio)


async def cmd_add_manager(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await state.set_state(Form.waiting_for_manager)

async def process_manager_name(message: types.Message, state: FSMContext):
    manager_name = message.text
    tgid = message.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID
    company_sheet_url = find_company_sheet_by_tgid(tgid)
    
    if company_sheet_url:
        try:
            await message.answer(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —à–∞–ø–∫–æ–π
            create_manager_sheet(company_sheet_url, manager_name)
            
        except Exception as e:
            print(e)
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    await state.clear()

def reg_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command(commands=['start']))
    dp.message.register(send_file_handler, F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"
    dp.message.register(process_audio, Form.waiting_for_audio)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    dp.message.register(cmd_add_manager, Command(commands=['add_manager']))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_manager
    dp.message.register(process_manager_name, Form.waiting_for_manager)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    dp.message.register(cmd_info, Command(commands=['info']))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    dp.callback_query.register(process_manager_selection, F.data.startswith("manager_"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞