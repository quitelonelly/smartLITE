import os
from typing import List, Optional
from oauth2client.service_account import ServiceAccountCredentials
import gspread

def is_user_registered(sheet, tgid: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –µ–≥–æ telegram_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True@app.post("/transcribe/{id}")
async def transcribe(
    id: int = Path(..., description="ID –∫–æ–º–ø–∞–Ω–∏–∏"),  # ID –∫–æ–º–ø–∞–Ω–∏–∏
    data: str = Form(..., description="–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"),  # JSON –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    audio_file: UploadFile = File(..., description="–ê—É–¥–∏–æ—Ñ–∞–π–ª"),  # –ê—É–¥–∏–æ—Ñ–∞–π–ª
    manager: str = Form(..., description="–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")  # –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID: {id}.")
    try:
        # –ü–∞—Ä—Å–∏–º JSON-–¥–∞–Ω–Ω—ã–µ
        data_dict = json.loads(data)
        transcription_data = TranscriptionData(**data_dict)

        # –ò—â–µ–º Telegram ID –ø–æ ID –∫–æ–º–ø–∞–Ω–∏–∏
        sheet = setup_google_sheets()
        telegram_id = get_telegram_id_by_company_id(sheet, id)

        if not telegram_id:
            logger.error(f"Telegram ID –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return {"error": "Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞
        total_duration = calculate_total_call_duration(transcription_data.role_analysis)

        # –ü–æ–ª—É—á–∞–µ–º URL —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏
        company_sheet_url = find_company_sheet_by_tgid(telegram_id)
        
        if not company_sheet_url:
            logger.error(f"–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return {"error": "–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        is_qualified = transcription_data.lead_analysis.final_verdict == "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        write_call_data_to_manager_sheet(company_sheet_url, manager, f"–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: {total_duration}", is_qualified)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (—á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ HTML)
        with tempfile.NamedTemporaryFile(mode='w+', suffix='.html', delete=False, encoding='utf-8') as temp_file:
            temp_file.write('\ufeff')  # –î–æ–±–∞–≤–ª—è–µ–º BOM
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–∞–π–ª
            temp_file.write(f"<h2>–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: {total_duration:.2f} —Å–µ–∫—É–Ω–¥</h2>\n\n")
            temp_file.write(f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager}")
            for role in transcription_data.role_analysis:
                start_time = ms_to_seconds(role.start_time)
                end_time = ms_to_seconds(role.end_time)
                temp_file.write(f"<br>üë§ {role.role}:</br>")
                temp_file.write(f"üó£Ô∏è –¢–µ–∫—Å—Ç: {role.text}\n")
                temp_file.write(f"<br>‚è±Ô∏è –í—Ä–µ–º—è: {start_time:.2f} - {end_time:.2f} —Å–µ–∫—É–Ω–¥\n\n</br>")
                temp_file.write("<hr></hr>")
            temp_file_path = temp_file.name

        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º BufferedInputFile
        with open(temp_file_path, 'rb') as file:
            file_content = file.read()
            input_file = BufferedInputFile(file_content, filename="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è.html")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
        audio_path = f"temp_audio_{id}.mp3"
        with open(audio_path, "wb") as buffer:
            buffer.write(await audio_file.read())

        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º BufferedInputFile
        with open(audio_path, 'rb') as audio:
            audio_content = audio.read()
            input_audio = BufferedInputFile(audio_content, filename=audio_file.filename)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        await bot.send_audio(chat_id=telegram_id, audio=input_audio)

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
        await asyncio.sleep(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
        await bot.send_document(chat_id=telegram_id, document=input_file)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML)
        message = format_message_for_bot(transcription_data, manager)  # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ª–∏–¥–∞ –∏ –∏—Ç–æ–≥–æ–≤—ã–º –≤–µ—Ä–¥–∏–∫—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
        await bot.send_message(chat_id=telegram_id, text=message, parse_mode="HTML")

        return {
            "id_company": id,
            "status": "success",
            "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram.",
            "manager": manager  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"error": str(e)}
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if 'temp_file_path' in locals():
            try:
                os.unlink(temp_file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        if 'audio_path' in locals():
            try:
                os.unlink(audio_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}"), –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        records = sheet.get_all_records()
        print(tgid)
        print(f"Records: {records}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º telegram_id (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ)
        for record in records:
            print(f"Record: {record}, tgid: {record.get('tgid')}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
            if record.get('tgid') == int(tgid):  # –ü—Ä–∏–≤–æ–¥–∏–º tgid –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                return True
        
        # –ï—Å–ª–∏ telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    
def setup_google_sheets(sheet_index=0):
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "/home/klim-petrov/projects/smartLITE/credentials.json", scope
        )
        client = gspread.authorize(creds)
        sheet = client.open_by_key("1CoDQJn0T_scUV7ZsbYU8x2nZTzu_F9CBrculeQIG2KA").get_worksheet(sheet_index)
        return sheet

def get_telegram_id_by_company_id(sheet, company_id):
    """
    –ò—â–µ—Ç Telegram ID –ø–æ ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ Google Sheets.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        all_values = sheet.get_all_values()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID –∫–æ–º–ø–∞–Ω–∏–∏
        for row in all_values:
            if row[0] == str(company_id):  # ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
                return row[1]  # Telegram ID –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
        
        # –ï—Å–ª–∏ ID –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Telegram ID: {e}")
        return None
    
def create_new_sheet(company_name):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.
    """
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "/home/klim-petrov/projects/smartLITE/credentials.json", scope
        )
        client = gspread.authorize(creds)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        new_sheet = client.create(f"Company_{company_name}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ
        new_sheet.share(None, perm_type='anyone', role='writer')  # –î–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ —Å –ø—Ä–∞–≤–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        service_account_email = os.getenv('SERVICE_ACC')  # Email —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        new_sheet.share(service_account_email, perm_type='user', role='writer')
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        my_email = os.getenv('MY_ACC')  # –í–∞—à email
        if my_email:
            new_sheet.share(my_email, perm_type='user', role='writer')
        
        return new_sheet.url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return None
    

def update_conversion_sheet(sheet, argument, column_name):
    try:
        all_values = sheet.get_all_values()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        for i, row in enumerate(all_values):
            if row[0] == argument:
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                column_index = all_values[0].index(column_name)
                current_value = int(row[column_index]) if row[column_index] else 0
                sheet.update_cell(i + 1, column_index + 1, current_value + 1)
                return
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        new_row = [argument] + [0] * (len(all_values[0]) - 1)
        column_index = all_values[0].index(column_name)
        new_row[column_index] = 1
        sheet.append_row(new_row)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")


def find_company_sheet_by_tgid(tgid):
    """
    –ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    try:
        sheet = setup_google_sheets()
        all_values = sheet.get_all_values()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º Telegram ID
        for row in all_values:
            if row[1] == str(tgid):  # Telegram ID –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
                return row[3]  # URL —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —á–µ—Ç–≤–µ—Ä—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ
        
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        return None
    
def get_managers_from_sheet(sheet_url: str) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ (–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –ª–∏—Å—Ç–æ–≤ –Ω–µ—Ç.
    """
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "/home/klim-petrov/projects/smartLITE/credentials.json", scope
        )
        client = gspread.authorize(creds)
        company_sheet = client.open_by_url(sheet_url)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ (–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤) –≤ —Ç–∞–±–ª–∏—Ü–µ
        worksheets = company_sheet.worksheets()
        managers = [ws.title for ws in worksheets if ws.title.startswith("–ú–µ–Ω–µ–¥–∂–µ—Ä")]
        
        return managers
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        return []
    
def write_call_data_to_manager_sheet(
    sheet_url: str, manager_name: str, total_duration: float, is_qualified: bool, kval_percentage: float, parasite_words: str
):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ –≤ –ª–∏—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "/home/klim-petrov/projects/smartLITE/credentials.json", scope
        )
        client = gspread.authorize(creds)
        company_sheet = client.open_by_url(sheet_url)

        # –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_sheet = company_sheet.worksheet(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
        row_data = [
            total_duration,  # –í—Ä–µ–º—è
            "–ö–≤–∞–ª" if is_qualified else "–ù–µ–∫–≤–∞–ª",  # –ö–≤–∞–ª/–Ω–µ–∫–≤–∞–ª
            kval_percentage,  # –ü—Ä–æ—Ü–µ–Ω—Ç –∫–≤–∞–ª–∞
            parasite_words,  # –°–ª–æ–≤–∞ –ø–∞—Ä–∞–∑–∏—Ç—ã
        ]
        manager_sheet.append_row(row_data)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")



def create_manager_sheet(sheet_url: str, manager_name: str):
    """
    –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —à–∞–ø–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "/home/klim-petrov/projects/smartLITE/credentials.json", scope
        )
        client = gspread.authorize(creds)
        company_sheet = client.open_by_url(sheet_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        try:
            manager_sheet = company_sheet.worksheet(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name}")
        except gspread.WorksheetNotFound:
            # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            manager_sheet = company_sheet.add_worksheet(title=f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name}", rows="100", cols="20")
            # –°–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã
            header = ["–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞", "–ö–≤–∞–ª/–Ω–µ–∫–≤–∞–ª", "%–ö–≤–∞–ª–∞", "–°–ª–æ–≤–∞–ü–∞—Ä–∞–∑–∏—Ç—ã"]
            manager_sheet.append_row(header)
        else:
            # –ï—Å–ª–∏ –ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–ø–∫–∞
            existing_data = manager_sheet.get_all_values()
            if not existing_data:  # –ï—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
                header = ["–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞", "–ö–≤–∞–ª/–Ω–µ–∫–≤–∞–ª", "%–ö–≤–∞–ª–∞", "–°–ª–æ–≤–∞–ü–∞—Ä–∞–∑–∏—Ç—ã"]
                manager_sheet.append_row(header)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

def get_company_id_by_tgid(sheet, tgid: int) -> Optional[int]:
    """
    –ò—â–µ—Ç ID –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    try:
        all_values = sheet.get_all_values()
        for row in all_values:
            if row[1] == str(tgid):  # Telegram ID –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
                return int(row[0])  # ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ ID –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        return None