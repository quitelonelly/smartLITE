import asyncio
import tempfile
import logging
import json
import os
from aiogram.types import BufferedInputFile
from fastapi import FastAPI, Path, File, UploadFile, Form
from main import bot
from core import create_manager_sheet, setup_google_sheets, get_telegram_id_by_company_id, find_company_sheet_by_tgid, write_call_data_to_manager_sheet
from server.repository import format_message_for_bot
from server.shemas import TranscriptionData

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Smart"
)

def ms_to_seconds(ms: int) -> float:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã."""
    return ms / 1000

def calculate_total_call_duration(role_analysis: list) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞."""
    total_duration = 0
    for role in role_analysis:
        total_duration += role.end_time - role.start_time
    return ms_to_seconds(total_duration)

@app.post("/transcribe/{id}")
async def transcribe(
    id: int = Path(..., description="ID –∫–æ–º–ø–∞–Ω–∏–∏"),  # ID –∫–æ–º–ø–∞–Ω–∏–∏
    data: str = Form(..., description="–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"),  # JSON –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    audio_file: UploadFile = File(..., description="–ê—É–¥–∏–æ—Ñ–∞–π–ª"),  # –ê—É–¥–∏–æ—Ñ–∞–π–ª
    manager: str = Form(..., description="–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")  # –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID: {id}.")
    try:
        # –ü–∞—Ä—Å–∏–º JSON-–¥–∞–Ω–Ω—ã–µ
        data_dict = json.loads(data)
        transcription_data = TranscriptionData(**data_dict)

        # –ò—â–µ–º Telegram ID –ø–æ ID –∫–æ–º–ø–∞–Ω–∏–∏
        sheet = setup_google_sheets()
        telegram_id = get_telegram_id_by_company_id(sheet, id)

        if not telegram_id:
            logger.error(f"Telegram ID –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return {"error": "Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞
        total_duration = calculate_total_call_duration(transcription_data.role_analysis)

        # –ü–æ–ª—É—á–∞–µ–º URL —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏
        company_sheet_url = find_company_sheet_by_tgid(telegram_id)
        
        if not company_sheet_url:
            logger.error(f"–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return {"error": "–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        # –°–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        create_manager_sheet(company_sheet_url, manager)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        is_qualified = transcription_data.lead_analysis.final_verdict == "–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"
        kval_percentage = transcription_data.lead_analysis.kval_percentage
        parasite_words = transcription_data.parasite_words_analysis
        write_call_data_to_manager_sheet(company_sheet_url, manager, total_duration, is_qualified, kval_percentage, parasite_words)

        # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
        if not is_qualified:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (—á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ HTML)
            with tempfile.NamedTemporaryFile(mode='w+', suffix='.html', delete=False, encoding='utf-8') as temp_file:
                temp_file.write('\ufeff')  # –î–æ–±–∞–≤–ª—è–µ–º BOM
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–∞–π–ª
                temp_file.write(f"<h2>–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: {total_duration:.2f} —Å–µ–∫—É–Ω–¥</h2>\n\n")
                temp_file.write(f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager}")
                for role in transcription_data.role_analysis:
                    start_time = ms_to_seconds(role.start_time)
                    end_time = ms_to_seconds(role.end_time)
                    temp_file.write(f"<br>üë§ {role.role}:</br>")
                    temp_file.write(f"üó£Ô∏è –¢–µ–∫—Å—Ç: {role.text}\n")
                    temp_file.write(f"<br>‚è±Ô∏è –í—Ä–µ–º—è: {start_time:.2f} - {end_time:.2f} —Å–µ–∫—É–Ω–¥\n\n</br>")
                    temp_file.write("<hr></hr>")
                temp_file_path = temp_file.name

            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º BufferedInputFile
            with open(temp_file_path, 'rb') as file:
                file_content = file.read()
                input_file = BufferedInputFile(file_content, filename="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è.html")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
            audio_path = f"temp_audio_{id}.mp3"
            with open(audio_path, "wb") as buffer:
                buffer.write(await audio_file.read())

            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º BufferedInputFile
            with open(audio_path, 'rb') as audio:
                audio_content = audio.read()
                input_audio = BufferedInputFile(audio_content, filename=audio_file.filename)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            await bot.send_audio(chat_id=telegram_id, audio=input_audio)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
            await asyncio.sleep(1)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            await bot.send_document(chat_id=telegram_id, document=input_file)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML)
            message = format_message_for_bot(transcription_data, manager)  # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ª–∏–¥–∞ –∏ –∏—Ç–æ–≥–æ–≤—ã–º –≤–µ—Ä–¥–∏–∫—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
            await bot.send_message(chat_id=telegram_id, text=message, parse_mode="HTML")

        return {
            "id_company": id,
            "status": "success",
            "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
            "manager": manager,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            "is_qualified": is_qualified,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"error": str(e)}
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if 'temp_file_path' in locals():
            try:
                os.unlink(temp_file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        if 'audio_path' in locals():
            try:
                os.unlink(audio_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")