import asyncio
import tempfile
import logging
import json
import os
from typing import Optional
from aiogram.types import BufferedInputFile, InputMediaAudio, InputMediaDocument
from aiogram.exceptions import TelegramNetworkError
from fastapi import FastAPI, Path, File, UploadFile, Form, HTTPException
from main import bot
from core import (
    create_manager_sheet,
    setup_google_sheets,
    get_telegram_id_by_company_id,
    find_company_sheet_by_tgid,
    write_call_data_to_manager_sheet
)
from server.repository import format_message_for_bot
from server.shemas import TranscriptionData

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title="Smart Call Analyzer")

def ms_to_seconds(ms: int) -> float:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã."""
    return ms / 1000

def calculate_total_call_duration(role_analysis: list) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞."""
    return ms_to_seconds(sum(role.end_time - role.start_time for role in role_analysis))

async def save_temp_file(content: bytes, prefix: str, suffix: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
    try:
        with tempfile.NamedTemporaryFile(prefix=prefix, suffix=suffix, delete=False) as tmp:
            tmp.write(content)
            return tmp.name
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        raise

async def cleanup_temp_files(*file_paths: Optional[str]):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    for path in file_paths:
        if path and os.path.exists(path):
            try:
                os.unlink(path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {path}: {e}")

@app.post("/transcribe/{company_id}")
async def transcribe(
    company_id: int = Path(..., description="ID –∫–æ–º–ø–∞–Ω–∏–∏", gt=0),
    data: str = Form(..., description="–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"),
    audio_file: UploadFile = File(..., description="–ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–≤–æ–Ω–∫–∞"),
    manager: str = Form(..., description="–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞", min_length=2)
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram."""
    logger.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {company_id}, –º–µ–Ω–µ–¥–∂–µ—Ä: {manager}")
    
    temp_file_path = None
    audio_path = None
    sent_messages = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–∫–∞—Ç–∞)

    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await audio_file.seek(0)
        audio_content = await audio_file.read()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª '{audio_file.filename}' —Ä–∞–∑–º–µ—Ä–æ–º {len(audio_content)} –±–∞–π—Ç")

        # –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö
        try:
            data_dict = json.loads(data)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {json.dumps(data_dict, indent=2, ensure_ascii=False)}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º–µ
            if 'lead_qualification' in data_dict and isinstance(data_dict['lead_qualification'], dict):
                data_dict['lead_qualification']['qualified'] = data_dict['lead_qualification'].get('qualified', '–Ω–µ—Ç')
            
            transcription_data = TranscriptionData(**data_dict)
        except json.JSONDecodeError as e:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            raise HTTPException(status_code=422, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram ID
        try:
            sheet = setup_google_sheets()
            telegram_id = get_telegram_id_by_company_id(sheet, company_id)
            if not telegram_id:
                raise HTTPException(status_code=404, detail="Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏")

        # –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
        total_duration = sum((role.end_time - role.start_time) for role in transcription_data.role_analysis) / 1000

        # –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        company_sheet_url = find_company_sheet_by_tgid(telegram_id)
        if not company_sheet_url:
            raise HTTPException(status_code=404, detail="–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
        is_qualified = transcription_data.lead_qualification.qualified in ('–¥–∞', True)
        
        write_call_data_to_manager_sheet(
            company_sheet_url,
            manager,
            data_dict,
            total_duration
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ HTML —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        html_content = [
            f"<p>–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager}</p>"
        ]

        for role in transcription_data.role_analysis:
            start = role.start_time / 1000
            end = role.end_time / 1000
            html_content.extend([
                f"<hr><b>üë§ {role.role}:</b>",
                f"<p>üó£Ô∏è –¢–µ–∫—Å—Ç: {role.text}</p>",
            ])

        temp_file_path = await save_temp_file(
            "\n".join(html_content).encode('utf-8-sig'),
            f"transcript_{company_id}_",
            ".html"
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        audio_path = await save_temp_file(
            audio_content,
            f"audio_{company_id}_",
            os.path.splitext(audio_file.filename)[1]
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        max_retries = 3
        retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã

        async def send_with_retry(send_func, *args, **kwargs):
            for attempt in range(max_retries):
                try:
                    result = await send_func(*args, **kwargs)
                    sent_messages.append(result)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return result
                except (TelegramNetworkError, TimeoutError) as e:
                    if attempt == max_retries - 1:
                        raise
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—à–∏–±–∫–∞: {e}")
                    await asyncio.sleep(retry_delay * (attempt + 1))

        try:
            # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            await send_with_retry(
                bot.send_audio,
                chat_id=telegram_id,
                audio=BufferedInputFile(audio_content, audio_file.filename),
            )

            # 2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            with open(temp_file_path, 'rb') as f:
                transcript_content = f.read()
                await send_with_retry(
                    bot.send_document,
                    chat_id=telegram_id,
                    document=BufferedInputFile(transcript_content, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è.html"),
                )

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            message = format_message_for_bot(transcription_data, manager)
            await send_with_retry(
                bot.send_message,
                chat_id=telegram_id,
                text=message,
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            for msg in sent_messages:
                try:
                    await bot.delete_message(chat_id=telegram_id, message_id=msg.message_id)
                except Exception as delete_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id}: {delete_error}")
            
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram")

        return {
            "company_id": company_id,
            "status": "success",
            "manager": manager,
            "is_qualified": is_qualified,
            "call_duration": total_duration
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–≤–æ–Ω–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    finally:
        await cleanup_temp_files(temp_file_path, audio_path)